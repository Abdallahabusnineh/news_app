import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:news_app/shared/abstraction/cash_helper.dart';
import 'package:news_app/shared/abstraction/dio_helper.dart';
import 'app.dart';
import 'package:device_preview/device_preview.dart';

import 'shared/core/error/custom_error.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await DioHelper.init();
  await CacheHelper.init();
  /* print('here we can check the value ');
  */ /*ABD.test();*/ /*
  print('**************');
String input = "ABCABAAAA";
  List<String> result = minimumSubString(input);
  print(result);*/
  //AppConstant.isDark = await CacheHelper.isDark();
  /*bool isTokenExpired = JwtDecoder.isExpired(AppConstant.token);
  if (!isTokenExpired) {
    // The user should authenticate
    print('token is not expired');

  }*/
  /*ErrorWidget.builder = (FlutterErrorDetails details) {
    return CustomErrorPage(
      errorDetails: details,
    );
  };*/
/*FlutterError.demangleStackTrace = (StackTrace stack) => stack;
FlutterError.onError = (FlutterErrorDetails details)  {
  print('onError errorrrrrrr1');
  FlutterError.presentError(details);
   Builder(builder: (context) {
    print('onError errorrrrrrr2');
    return CustomErrorPage(
      errorDetails: details,
    );
  });

};*/
/*  FlutterError.onError = (FlutterErrorDetails details) {
    print('flutter errorrrrrrr1');
    FlutterError.presentError(details);
    FlutterError.dumpErrorToConsole(details);
    runApp(
      DevicePreview(
        enabled: false,
        builder: (context) =>
        const ProviderScope(child: MyApp()), // Wrap your app
      ),
    );
  };*/
  ErrorWidget.builder = (FlutterErrorDetails details) {
    print('flutter errorrrrrrr2');
    return
      Builder(builder: (context) {
        print('flutter errorrrrrrr3');
        return CustomErrorPage(
          errorDetails: details,
          key: Key('error'),
        );
      });
  };
  runApp(
    DevicePreview(
      enabled: false,
      builder: (context) =>
          const ProviderScope(child: MyApp()), // Wrap your app
    ),
  );
}
